
const http = require("http");
const { mainModule } = require("process");
const service = require("./service");
let TelegramBot = require("./telegram");
const fs = require("fs");
const path = require("path");
const crypto = require('crypto');

async function RunBot()
{
	let bot = new TelegramBot("5779081236:AAENm863O-uQi7HuDntUDkMf1EbZitaW5G4");
	await bot.Write("1598562255", "–°–ª—É–∂–±–∞ –∑–∞–ø—É—â–µ–Ω–∞");
	//await bot.List();
	bot.Answer = async function(message)
	{
		if (message.text.startsWith("/start"))
		{
			await bot.Write(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, " + message.chat.first_name);
			await server.Call("auth", "telegram", {"user_id": "" + message.from.id,
			                                       "first_name": message.from.first_name,
			                                       "device": message.text.split(" ")[1]});
			await bot.Write(message.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å. –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç.");
			//await bot.Write(message.chat.id, '–ù–∞–ø–∏—à–∏ –ª—é–±—É—é —Ñ–æ—Ä–º—É–ª—É —Å "x"');
			//await bot.Write(message.chat.id, "–ù–∞–ø—Ä–∏–º–µ—Ä, x * x + 2 * x + 5");
		}
		else
		{
			await bot.Write(message.chat.id, "?");
			// let f = message.text;
			// let text = "";
			// let good = false;
			// for (let x = -10; x <= 10; x++)
			// {
			// 	let —Ö = x; // –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
			// 	let X = x; // –ë–æ–ª—å—à–∞—è
			// 	let –• = x; // –ë–æ–ª—å—à–∞—è –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
			// 	let y = "?";
			// 	try
			// 	{
			// 		y = eval(f);
			// 		good = true;
			// 	}
			// 	catch (exception)
			// 	{
			// 		console.log("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è: " + exception);
			// 	}
			// 	text += (text ? ", " : "") + "(" + x + "; " + y + ")";
			// }
			// if (good)
			// 	await bot.Write(message.chat.id, "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–µ–∫ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ: " + text);
			// else
			// 	await bot.Write(message.chat.id, "–ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ " + f);
		}
	};
	console.log("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã");
	await bot.Listen();
	console.log("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
	//await new Promise(resolve => { setTimeout(resolve, 2000); } );
}

let server = new class
{
	async Call(gateway, method, list = { }, log = true)
	{
		let uri = "http://127.0.0.1:2020/" + method;
		let content = JSON.stringify(list);
		return new Promise((resolve, reject) =>
		{
			let request = http.request(uri);
			request.setHeader("gateway", gateway);
			request.setHeader("Content-Type", "text/plain;charset=UTF-8");
			request.setHeader("Content-Length", Buffer.byteLength(content));
			request.on("response", response =>
			{
				let data = "";
				response.on("data", chunk => {data += chunk;} );
				response.on("end", () =>
				{
					let json = JSON.parse(data);
					if (json && json.error)
					{
						if (log)
							service.log("" + gateway + "." + method +
									    "(" + content +
									    ") üü• " + data);
						reject(new Error("–û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê: " + json.error));
					}
					if (log)
						service.log("" + gateway + "." + method +
								    "(" + content +
								    ") üü© " + data);
					resolve(json);
				} );
			} );
			request.end(content);
		} );
	}
};

async function RunServer()
{
	service.Do = async function(work)
	{
		if (work.task == "version")
		{
			await server.Call("auth", "identify", {"device": "123"});
			return { "task": work.id,
					 "version": process.version };
		}
	};
	await service.Run();
}

RunBot();
RunServer();
